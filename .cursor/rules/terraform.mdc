---
description: 
globs: **/*.tf
alwaysApply: false
---
description: |
  Diese Regel beschreibt, wie Terraform-Dateien im Projekt zu behandeln sind.
  Sie hilft dabei, Best Practices und Formatierungsregeln für Terraform-Code sicherzustellen.

auto_attach:
  - pattern: "**/*.tf"
    reason: "Gilt für alle Terraform-Dateien im Projekt."

**WICHTIG: Bitte mit mir nur auf deutsch sprechen!!!!!**
**Dokumentiere jede Änderung in der Änderungshistorie README.md!!!!!**




## Versionsmanagement
- Verwende semantische Versionierung für Git-Tags (z.B. v1.0.0)
- Erstelle neue Tags für bedeutende Änderungen oder Releases
- Nutze aussagekräftige Commit-Nachrichten nach dem Schema `typ: beschreibung`
  - feat: Neue Funktionalität
  - fix: Fehlerbehebung
  - docs: Dokumentationsänderungen
  - style: Formatierungsänderungen
  - refactor: Code-Umstrukturierung ohne Funktionsänderung
  - test: Testcodeänderungen
  - chore: Änderungen an Build-Prozessen oder Tools
- Führe stets terraform fmt aus, um eine konsistente Codeformatierung zu gewährleisten
- Verwende terraform validate und terraform plan, um sicherzustellen, dass der Code korrekt ist
- Wenn terraform plan erfolgreich ist, führe git commit mit sinnvollem Text im aktuellen Branch aus und
- erstelle mir einen Merge-Request im GitLab mit dem Befehl
glab mr create --target-branch main --title "*Aabkürzung von dem Change**" --description "***Detaillierten anpassung aus wurde im geändert***"
glab mr create und genehmige ihn sofort mit glab mr merge 63 --yes


## Namenskonventionen
## Code-Stil
- Verwende 2 Leerzeichen zur Einrückung
- Variablen sind nach Funktionalität gruppiert und mit Kommentaren versehen
- Benenne Ressourcen, Variablen und Outputs aussagekräftig, konsistent und sprechend (z.B. <projekt>-<env>-<resource>), siehe @Naming Guide
- Verwende snake_case für Ressourcennamen in Terraform
- Strukturiere Dateien in logische Abschnitte mit klaren Kommentaren
- Vermeide Hardcoding von Secrets und sensiblen Daten
- Terraform-Best-Practices befolgen.


## Terraform-Best-Practices
- Verwenden Sie Remote-Backends (gitlab) für die Statusverwaltung.
- Nutzen Sie Arbeitsbereiche zur Trennung von Umgebungen (z. B. Entwicklung, Staging, Produktion).
- Organisieren Sie Ressourcen nach Dienst- oder Anwendungsdomäne (z. B. Netzwerk, Computing).
- Führen Sie stets „terraform fmt“ aus, um eine konsistente Codeformatierung zu gewährleisten.
- Verwenden Sie „terraform validate“ und Linting-Tools wie „tflint“ oder „terrascan“, um Fehler frühzeitig zu erkennen.
- DRY-Prinzip anwenden
- Terraform-Best-Practices befolgen.
    https://www.terraform-best-practices.com/code-structure
    https://www.terraform-best-practices.com/naming
    https://www.terraform-best-practices.com/code-styling
- Schreiben Sie prägnanten, gut strukturierten Terraform-Code mit aussagekräftigen Kommentaren.
- Organisieren Sie Infrastrukturressourcen in logischen Einheiten und nutzen Sie wiederverwendbare Module.
- Verwenden Sie flexible Provider-Versionierungen mit `~>` Syntax für Patch-Updates.
- Verwenden Sie versionierte Module und Provider-Versionssperren, um konsistente Bereitstellungen zu gewährleisten.
- Vermeiden Sie hartcodierte Werte; verwenden Sie stets Variablen für mehr Flexibilität.
- Nutzen Sie Outputs für bessere Integration mit anderen Modulen.
- Vermeiden Sie fest codierte Werte; verwenden Sie stets Variablen für mehr Flexibilität.
- Strukturieren Sie Dateien in logische Abschnitte: Hauptkonfiguration, Variablen, Ausgaben und Module.
- Verwenden Sie Tagging für alle Ressourcen, um eine ordnungsgemäße Nachverfolgung und ein optimales Kostenmanagement zu gewährleisten.
- Stellen Sie sicher, dass Ressourcen modular und wiederverwendbar definiert sind, um die Skalierung zu vereinfachen.
