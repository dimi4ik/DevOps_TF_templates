# versions.tf - Provider Version Constraints
# Template für DevOps Terraform Projekte

terraform {
  # Minimale Terraform Version
  required_version = ">= 1.0"
  
  # Provider Version Constraints
  required_providers {
    # Azure Resource Manager Provider
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.74.0"  # Stable version für Production
      # version = "~> 3.0"   # Flexible version für Development
    }
    
    # VMware vSphere Provider
    vsphere = {
      source  = "hashicorp/vsphere"
      version = "~> 2.5.0"   # Stable version für Production
      # version = "~> 2.0"   # Flexible version für Development
    }
    
    # Random Provider für Passwort-Generierung
    random = {
      source  = "hashicorp/random"
      version = "~> 3.5.0"   # Stable version
    }
    
    # TLS Provider für Zertifikat-Management
    tls = {
      source  = "hashicorp/tls"
      version = "~> 4.0.0"
    }
    
    # Local Provider für lokale Ressourcen
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4.0"
    }
    
    # HTTP Provider für externe API Calls
    http = {
      source  = "hashicorp/http"
      version = "~> 3.4.0"
    }
    
    # Template Provider (Legacy - für Kompatibilität)
    template = {
      source  = "hashicorp/template"
      version = "~> 2.2.0"
    }
    
    # Null Provider für Provisioners
    null = {
      source  = "hashicorp/null"
      version = "~> 3.2.0"
    }
    
    # Time Provider für zeitbasierte Ressourcen
    time = {
      source  = "hashicorp/time"
      version = "~> 0.9.0"
    }
    
    # Archive Provider für ZIP/TAR Operationen
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4.0"
    }
    
    # External Provider für externe Commands
    external = {
      source  = "hashicorp/external"
      version = "~> 2.3.0"
    }
    
    # ================================================
    # OPTIONALE PROVIDER (Comment out if not needed)
    # ================================================
    
    # HashiCorp Vault Provider
    vault = {
      source  = "hashicorp/vault"
      version = "~> 3.20.0"
    }
    
    # GitLab Provider
    gitlab = {
      source  = "gitlabhq/gitlab"
      version = "~> 16.0"
    }
    
    # ================================================
    # COMMUNITY PROVIDER (Third-party)
    # ================================================
    
    # Citrix Cloud Provider (Community)
    # citrixcloud = {
    #   source  = "citrix/citrixcloud"
    #   version = "~> 0.5.0"
    # }
    
    # Active Directory Provider (Community)
    # ad = {
    #   source  = "hashicorp/ad"
    #   version = "~> 0.4.0"
    # }
    
    # Windows Provider (Community)
    # windows = {
    #   source  = "terraform-providers/windows"
    #   version = "~> 0.1.0"
    # }
  }
  
  # ================================================
  # BACKEND KONFIGURATION
  # ================================================
  
  # GitLab HTTP Backend für State Management
  backend "http" {
    # Diese Werte werden durch Backend-Konfigurationsdatei gesetzt:
    # terraform init -backend-config=backend-dev.conf
    # 
    # Beispiel backend-dev.conf:
    # address         = "https://gitlab.example.com/api/v4/projects/PROJECT_ID/terraform/state/ENVIRONMENT"
    # lock_address    = "https://gitlab.example.com/api/v4/projects/PROJECT_ID/terraform/state/ENVIRONMENT/lock"
    # unlock_address  = "https://gitlab.example.com/api/v4/projects/PROJECT_ID/terraform/state/ENVIRONMENT/lock"
    # username        = "terraform"
    # password        = "$GITLAB_ACCESS_TOKEN"
    # lock_method     = "POST"
    # unlock_method   = "DELETE"
    # retry_wait_min  = 5
  }
  
  # Alternative: Azure Storage Backend
  # backend "azurerm" {
  #   resource_group_name  = "terraform-state-rg"
  #   storage_account_name = "terraformstate12345"
  #   container_name       = "tfstate"
  #   key                  = "PROJECT_NAME/ENVIRONMENT/terraform.tfstate"
  # }
  
  # Alternative: S3 Backend (für AWS Kompatibilität)
  # backend "s3" {
  #   bucket         = "terraform-state-bucket"
  #   key            = "PROJECT_NAME/ENVIRONMENT/terraform.tfstate"
  #   region         = "us-west-2"
  #   encrypt        = true
  #   dynamodb_table = "terraform-state-lock"
  # }
  
  # Development: Local Backend (nur für Testing)
  # backend "local" {
  #   path = "terraform.tfstate"
  # }
}

# ================================================
# PROVIDER VERSION PINNING STRATEGIEN
# ================================================

# Development Environment: Flexible Versioning
# Erlaubt Minor und Patch Updates für neue Features
# Beispiel: version = "~> 3.0" erlaubt 3.x.x aber nicht 4.x.x

# Staging Environment: Semi-Stable Versioning  
# Erlaubt nur Patch Updates für Bugfixes
# Beispiel: version = "~> 3.74.0" erlaubt 3.74.x aber nicht 3.75.x

# Production Environment: Exact Versioning
# Verwendet exakte Versionen für maximale Stabilität
# Beispiel: version = "3.74.0" - keine automatischen Updates

# ================================================
# VERSION UPGRADE STRATEGY
# ================================================

# 1. Testing: Upgrade in Development Environment zuerst
# 2. Validation: Ausführliche Tests mit neuen Provider-Versionen
# 3. Staging: Deploy auf Staging für Integration Tests
# 4. Production: Kontrollertes Upgrade nach erfolgreicher Validierung

# Terraform Version Upgrade Checklist:
# □ Prüfe Terraform Changelog für Breaking Changes
# □ Update required_version in versions.tf
# □ Teste in Development Environment
# □ Update Provider Versionen schrittweise
# □ Führe terraform plan aus für Drift Detection
# □ Dokumentiere Änderungen in CHANGELOG.md

# Provider Upgrade Checklist:
# □ Prüfe Provider Changelog für Breaking Changes
# □ Update version constraints in versions.tf
# □ Führe terraform init -upgrade aus
# □ Teste terraform plan für unerwartete Änderungen
# □ Validiere Funktionalität in Test Environment
# □ Update Dokumentation falls erforderlich

# ================================================
# COMPATIBILITY MATRIX
# ================================================

# Terraform Version Compatibility:
# - Terraform >= 1.0: Alle Provider unterstützt
# - Terraform >= 1.3: Enhanced validation und moved blocks
# - Terraform >= 1.5: Import blocks und configuration-driven import
# - Terraform >= 1.6: Test framework und S3 backend improvements

# Azure Provider Compatibility:
# - azurerm ~> 3.0: Azure CLI >= 2.30.0, PowerShell >= 7.0
# - azurerm ~> 3.74: Neueste Azure REST API Features
# - Minimum: azurerm >= 3.0 für Azure Resource Manager v2

# VMware Provider Compatibility:
# - vsphere ~> 2.0: vSphere 6.5+, vCenter 6.5+
# - vsphere ~> 2.5: vSphere 7.0+, vCenter 7.0+, ESXi 7.0+
# - Empfohlen: Neueste vSphere Version für beste Kompatibilität